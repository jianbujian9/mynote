 7-9

  1: 假如：scanf("%d/%d",&i,&o);
      那么，先找到一个 + 或 - ，然后匹配一个整数，再从输入中，找 / ，如果找到了，就继续匹配，没找到，就终止。
      1.1: scanf 在寻找每个数的起始位置的时候，会跳过空白字符(包括：空格，tab,换行，换页....)。
      1.2：空白字符，可以出现在，两个转换说明之间，但是，不能出现在格式串的头和尾(十分不推荐)
  在读入整数前，scanf 会跳过空格，但是在读入字符前，不会
      1.3: scanf("%1d",&a);   表示 从输入的数中，从左取一位 存入 a 中。
      
  2：利用 printf，输出 % 的格式串是： printf("%%");   两个 %

  3: 在 c 中，赋值不是一种语句，赋值就像是 + 那样，是运算符，所以，赋值运算会有结果，int v;
    v=3;    其运算结果是，v 的值，3。同时还有一个副作用，那就是，改变左操作数 v 使得 v 的值变成 3 。

  ------------------------
  左结合的运算符： + (加) | - | * | / | % |比较运算符| 判断运算符|逻辑运算符:xx
  右结合的运算符：+ (正) | -  | =  |+= (以及类似的复合运算符)
  -------------------------

  4: 为一个复杂的表达式 添加 圆括号，使之简化：将优先级高的运算符及其操作数 用括号 括起来，视为一个单独的操作数，通等优先级的运算符，同时出现时，就将 其结合性考虑进来。
   a = b += c++ - d + --e / -f; 
   (a = (b += (((c++) - d) + ((--e) / (-f)))));

  5: int a=0;b=1;c=1;
     a=b++ - --c;           //相当于：a=((b++)-(--c)); => c=c-1; a=b+c; b=b+1;
     结果：a=1; b=2; c=0;

  6: 在 c 语言中缺乏 布尔类型 的值，c89 中没有解决这个问题，下面提供三种解决方案：
    1) 定义宏 :
     #define TRUE 1
     #define FALSE 0
     #define BOOL int 

     BOOL flag=TRUE;
    2) C99 中提供了 _Bool 型 是一种无符号整型 只能赋值 0 或 1；

推荐  3) c99 提供了一个新的头文件 <stdbool.h> 该头文件提供了 bool 宏 、true 宏以及 false 宏：
     bool flag
     flag=true;
     flag=false;

  7:  switch (控制表达式){
        case 常量表达式 : 语句

        case 常量表达式 : 语句

        default  :语句
     }
        1) 控制表达式 必须是 整型表达式 。在 c 中，将字符当作 整数来处理 。所以 switch 语句中 可以对字符进行判定。但是， 不能使用 浮点数 和字符串。

        2) 常量表达式 中，不能包含 变量和函数调用。常量表达式 必须是 整型 或 字符。

  8:  关于 条件表达式： 
     int i;float f;
     i > 0 ? i : f; //结果是类型是 float 类型 。即使当 判断 为 真  的时候，表达式的结果也是 将 i 转化成 float 类型.

  9: 在 c 中实现无限循环：  while (1){}
     或：  for(;;){}

     -----------------aa.c---------------
      int n=0;
      for(int n=1;n<=10;n++){        //即使外面声明了 n for循环内还可以再次声明，仅用于forn内
        printf("jjjjjj   %djjjj\n",n);  //会从1 到10 的输出
      }
      printf("%d\n",n);    //会输出 0
      -----------------------------------
      //可见：for 语句声明的变量不可以在循环外访问(循环外不可见)  让 for 循环语句声明自己的循环控制变量是个好的决定。

    10： break 语句可以用于 switch 和 循环 ，而 continue 只可以用于 循环。

    11: 素数的判断：
    --------------------------------------------------------------------
    所谓素数是指除了1和它本身以外，不能被任何整数整除的数，例如17就是素数，因为它不能被2~16的任一整数整除。因此判断
一个整数m是否是素数，只需把m被2~m-1之间的每一个整数去除，如果都不能被整除，那么m就是一个素数
另外判断方法还可以简化。m不必呗2~m-1之间的每一个整数去除，只需被2~√m之间的每一个整数去除就可以了。如果m不能被2~√m间任一整数整除，m必定是素数。例如判别17是是否为素数，只需使17被2~4之间的每一个整数去除，由于都不能整除，可以判定17是素数。（原因：因为如果m能被2~m-1之间任一整数整除，其二个因子必定有一个小于或等于√m，另一个大于或等于√m。例如16能被2,4,8整除，16=2*8,2小于4,8大于4，16=4*4,4=√16，因此只需判定在2~4之间有无因子即可）

                        #include<stdio.h>
                        #include<math.h>
                        void main(){
                           int m,i,k;
                           printf("请输入一个整数：");
                           scanf("%d",&m);
                           k=(int)sqrt(m);
                           for(i=2;i<=k;i++){
                              if(m%i==0)
                                 break;
                           }
                           if(i>k){
                               printf("%d 是素数。\n",m);
                           }
                           else{
                               printf("%d 不是素数。\n",m);
                           }
                        }

  -------------------------------------------------------------------------

  12: linux gcc 编译时，如果用到了 math中的函数，要手工加入函数库链接:-lm，即：
        gcc -o tt your_prog.c -lm


  13: 基本类型：
    int 整型：
       1) 有符号整数：二进制的最高位是符号位。0 表示正数 。1 表示负数。
       2) 无符号整数：二进制的最高位也是数值的一部分。 unsigned   通常用于系统编程和与机器相关的应用。

    c 语言的整型有不同的尺寸。int 类型通常是32位的。 但是在一些老的 cpu 中可能是 16 位的。
    在c  中，可以指明变量是 long  short  signed   unsigned  并且可以组合。通常默认都是 signed  有以下组合：
       short int          unsigned short int
       int                unsigned int
       long int           unsigned long int
       //int 有时是可有可无的 long int 通常简写 long  

    浮点类型：
      c 中提供了三种浮点类型：
       float:单精度
       double : 双精度 (绝大多数够用)
       long double: 扩展精度浮点数  (很少用到)

 float : 32 位      二进制，从左到右：符号位 1 位 ，指数 8 位 ，尾数 23 位
 double ：64 位                       符号位 1 位 ，指数 11 位，尾数 52 位

   浮点数的读取：
    单精度：%e %f %g

    double ld;
    scanf("%lf",&ld);
    //%lf 只是用于scanf 不能用于printf 

    long double ld;
    scanf("%Lf",&ld);
    printf("%Lf",ld);


 字符类型：char
   char 类型的变量可以用任意的单字符赋值：
   char ch;
   ch='a'   //注意，使用单引号

  在 c 中，字符和整型的关联非常强。字符的取值范围可以看作是 0~127的整数。

   
